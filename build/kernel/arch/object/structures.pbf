--
-- Copyright 2014, General Dynamics C4 Systems
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(GD_GPL)
--
--
-- Copyright 2014, General Dynamics C4 Systems
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(GD_GPL)
--
---- Default base size: uint32_t
base 32
-- Including the common structures_32.bf is neccessary because
-- we need the structures to be visible here when building
-- the capType
--
-- Copyright 2014, General Dynamics C4 Systems
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(GD_GPL)
--
-- Default base size: uint32_t
base 32
block null_cap {
    padding 32
    padding 28
    field capType 4
}
-- The combination of freeIndex and blockSize must match up with the
-- definitions of MIN_SIZE_BITS and MAX_SIZE_BITS
block untyped_cap {
    field capFreeIndex 26
    field capIsDevice 1
    field capBlockSize 5
    field_high capPtr 28
    field capType 4
}
block endpoint_cap(capEPBadge, capCanGrant, capCanSend, capCanReceive,
                   capEPPtr, capType) {
    field_high capEPPtr 28
    padding 1
    field capCanGrant 1
    field capCanReceive 1
    field capCanSend 1
    field capEPBadge 28
    field capType 4
}
block notification_cap {
    field capNtfnBadge 28
    padding 2
    field capNtfnCanReceive 1
    field capNtfnCanSend 1
    field_high capNtfnPtr 28
    field capType 4
}
block reply_cap(capReplyMaster, capTCBPtr, capType) {
    padding 32
    field_high capTCBPtr 27
    field capReplyMaster 1
    field capType 4
}
-- The user-visible format of the data word is defined by cnode_capdata, below.
block cnode_cap(capCNodeRadix, capCNodeGuardSize, capCNodeGuard,
                capCNodePtr, capType) {
    padding 4
    field capCNodeGuardSize 5
    field capCNodeRadix 5
    field capCNodeGuard 18
    field_high capCNodePtr 27
    padding 1
    field capType 4
}
block cnode_capdata {
    padding 6
    field guard 18
    field guardSize 5
    padding 3
}
block thread_cap {
    padding 32
    field_high capTCBPtr 28
    field capType 4
}
block irq_control_cap {
    padding 32
    padding 24
    field capType 8
}
block irq_handler_cap {
    padding 24
    field capIRQ 8
    padding 24
    field capType 8
}
block zombie_cap {
    field capZombieID 32
    padding 18
    field capZombieType 6
    field capType 8
}
block domain_cap {
    padding 32
    padding 24
    field capType 8
}
---- Arch-independent object types
-- Endpoint: size = 16 bytes
block endpoint {
    padding 64
    field_high epQueue_head 28
    padding 4
    field_high epQueue_tail 28
    padding 2
    field state 2
}
-- Notification object: size = 16 bytes
block notification {
    field_high ntfnBoundTCB 28
    padding 4
    field ntfnMsgIdentifier 32
    field_high ntfnQueue_head 28
    padding 4
    field_high ntfnQueue_tail 28
    padding 2
    field state 2
}
-- Mapping database (MDB) node: size = 8 bytes
block mdb_node {
    field_high mdbNext 29
    padding 1
    field mdbRevocable 1
    field mdbFirstBadged 1
    field_high mdbPrev 29
    padding 3
}
-- Thread state data
--
-- tsType
-- * Running
-- * Restart
-- * Inactive
-- * BlockedOnReceive
-- - Endpoint
-- * BlockedOnSend
-- - Endpoint
-- - CanGrant
-- - IsCall
-- - IPCBadge
-- - Fault
-- - faultType
-- * CapFault
-- - Address
-- - InReceivePhase
-- - LookupFailure
-- - lufType
-- * InvalidRoot
-- * MissingCapability
-- - BitsLeft
-- * DepthMismatch
-- - BitsFound
-- - BitsLeft
-- * GuardMismatch
-- - GuardFound
-- - BitsLeft
-- - GuardSize
-- * VMFault
-- - Address
-- - FSR
-- - FaultType
-- * UnknownSyscall
-- - Number
-- * UserException
-- - Number
-- - Code
-- * BlockedOnReply
-- * BlockedOnFault
-- - Fault
-- * BlockedOnNotification
-- - Notification
-- * Idle
-- Lookup fault: size = 8 bytes
block invalid_root {
    padding 62
    field lufType 2
}
block missing_capability {
    padding 56
    field bitsLeft 6
    field lufType 2
}
block depth_mismatch {
    padding 50
    field bitsFound 6
    field bitsLeft 6
    field lufType 2
}
block guard_mismatch {
    field guardFound 32
    padding 18
    field bitsLeft 6
    field bitsFound 6
    field lufType 2
}
tagged_union lookup_fault lufType {
    tag invalid_root 0
    tag missing_capability 1
    tag depth_mismatch 2
    tag guard_mismatch 3
}
-- Fault: size = 8 bytes
block NullFault {
    padding 61
    field seL4_FaultType 3
}
block CapFault {
    field address 32
    field inReceivePhase 1
    padding 28
    field seL4_FaultType 3
}
block UnknownSyscall {
    field syscallNumber 32
    padding 29
    field seL4_FaultType 3
}
block UserException {
    field number 32
    field code 29
    field seL4_FaultType 3
}
-- Thread state: size = 12 bytes
block thread_state(blockingIPCBadge, blockingIPCCanGrant, blockingIPCIsCall,
                   tcbQueued, blockingObject,
                   tsType) {
    field blockingIPCBadge 28
    field blockingIPCCanGrant 1
    field blockingIPCIsCall 1
    padding 2
    -- this is fastpath-specific. it is useful to be able to write
    -- tsType and without changing tcbQueued
    padding 31
    field tcbQueued 1
    field_high blockingObject 28
    field tsType 4
}
---- 1 -specific cap types
block frame_cap {
    padding 1
    field capFSize 1
    field capFMappedASIDLow 10
    field_high capFMappedAddress 20
    padding 1
    field capFMapType 2
    field capFIsDevice 1
    field capFMappedASIDHigh 2
    field capFVMRights 2
    field_high capFBasePtr 20
    field capType 4
}
-- Second-level page table
block page_table_cap {
    padding 8
    field capPTIsMapped 1
    field capPTMappedASID 12
    field_high capPTMappedAddress 11
    padding 8
    field_high capPTBasePtr 20
    field capType 4
}
-- First-level page table (page directory)
block page_directory_cap {
    padding 17
    field capPDIsMapped 1
    field capPDMappedASID 12
    field_high capPDMappedAddress 2
    padding 8
    field_high capPDBasePtr 20
    field capType 4
}
-- Cap to the table of 2^6 ASID pools
block asid_control_cap {
    padding 32
    padding 28
    field capType 4
}
-- Cap to a pool of 2^10 ASIDs
block asid_pool_cap {
    padding 20
    field capASIDBase 12
    padding 8
    field_high capASIDPool 20
    field capType 4
}
-- IO Port Cap
block io_port_cap {
    field capIOPortFirstPort 16
    field capIOPortLastPort 16
    padding 16
    padding 8
    field capType 8
}
block io_port_capdata {
    field firstPort 16
    field lastPort 16
}
-- IO Space Cap
block io_space_cap {
    field capDomainID 16
    field capPCIDevice 16
    padding 28
    field capType 4
}
block io_space_capdata {
    field domainID 16
    field PCIDevice 16
}
-- IO Page Table Cap
block io_page_table_cap {
    field capIOPTIsMapped 1
    field capIOPTLevel 4
    field_high capIOPTMappedAddress 11
    field capIOPTIOASID 16
    padding 4
    field_high capIOPTBasePtr 20
    field capType 8
}
-- NB: odd numbers are arch caps (see isArchCap())
tagged_union cap capType {
    mask 4 0xe
    mask 8 0x0e
    -- 4-bit tag caps
    tag null_cap 0
    tag untyped_cap 2
    tag endpoint_cap 4
    tag notification_cap 6
    tag reply_cap 8
    tag cnode_cap 10
    tag thread_cap 12
    -- Do not extend even 4-bit caps types beyond 12, as we use
    -- 14 (0xe) to determine which caps are 8-bit.
    -- 4-bit tag arch caps
    tag frame_cap 1
    tag page_table_cap 3
    tag page_directory_cap 5
    tag asid_control_cap 9
    tag asid_pool_cap 11
    tag io_space_cap 13
    -- Do not extend odd 4-bit caps types beyond 13, as we use
    -- 15 (0xf) to determine which caps are 8-bit.
    -- 8-bit tag caps
    tag irq_control_cap 0x0e
    tag irq_handler_cap 0x1e
    tag zombie_cap 0x2e
    tag domain_cap 0x3e
    -- 8-bit tag arch caps
    tag io_page_table_cap 0x0f
    tag io_port_cap 0x1f
}
---- 1 specific fault types
block VMFault {
    field address 32
    field FSR 5
    padding 7
    field instructionFault 1
    padding 16
    field seL4_FaultType 3
}
-- VM attributes
block vm_attributes {
    padding 29
    field x86PATBit 1
    field x86PCDBit 1
    field x86PWTBit 1
}
---- 1 specific object types
-- GDT entries (Segment Desciptors)
block gdt_null {
    padding 19
    field desc_type 3
    padding 42
}
block gdt_code {
    field base_high 8
    field granularity 1
    field operation_size 1
    padding 1
    field avl 1
    field seg_limit_high 4
    field present 1
    field dpl 2
    field desc_type 3
    field readable 1
    field accessed 1
    field base_mid 8
    field base_low 16
    field seg_limit_low 16
}
block gdt_data {
    field base_high 8
    field granularity 1
    field operation_size 1
    padding 1
    field avl 1
    field seg_limit_high 4
    field present 1
    field dpl 2
    field desc_type 3
    field writable 1
    field accessed 1
    field base_mid 8
    field base_low 16
    field seg_limit_low 16
}
block gdt_tss {
    field base_high 8
    field granularity 1
    padding 2
    field avl 1
    field limit_high 4
    field present 1
    field dpl 2
    field desc_type 3
    field busy 1
    field always_1 1
    field base_mid 8
    field base_low 16
    field limit_low 16
}
tagged_union gdt_entry desc_type {
    tag gdt_null 0
    tag gdt_tss 2
    tag gdt_data 4
    tag gdt_code 6
}
-- IDT entries (Gate Desciptors)
block task_gate {
    padding 16
    field present 1
    field dpl 2
    padding 2
    field type 3
    padding 8
    field tss_seg_selector 16
    padding 16
}
block interrupt_gate {
    field offset_high 16
    field present 1
    field dpl 2
    padding 1
    field gate_size 1
    field type 3
    padding 8
    field seg_selector 16
    field offset_low 16
}
block trap_gate {
    field offset_high 16
    field present 1
    field dpl 2
    padding 1
    field gate_size 1
    field type 3
    padding 8
    field seg_selector 16
    field offset_low 16
}
tagged_union idt_entry type {
    tag task_gate 5
    tag interrupt_gate 6
    tag trap_gate 7
}
-- Task State Segment (TSS)
block tss {
    field io_map_base 16
    padding 15
    field trap 1
    padding 16
    field sel_ldt 16
    padding 16
    field gs 16
    padding 16
    field fs 16
    padding 16
    field ds 16
    padding 16
    field ss 16
    padding 16
    field cs 16
    padding 16
    field es 16
    field edi 32
    field esi 32
    field ebp 32
    field esp 32
    field ebx 32
    field edx 32
    field ecx 32
    field eax 32
    field eflags 32
    field eip 32
    field cr3 32
    padding 16
    field ss2 16
    field esp2 32
    padding 16
    field ss1 16
    field esp1 32
    padding 16
    field ss0 16
    field esp0 32
    padding 16
    field prev_task 16
}
-- PDs and PTs
block pde_pt {
    field_high pt_base_address 20
    field avl 3
    padding 1
    field page_size 1
    padding 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block pde_large {
    field_high page_base_address 11
    padding 8
    field pat 1
    field avl 3
    field global 1
    field page_size 1
    field dirty 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
tagged_union pde page_size {
    tag pde_pt 0
    tag pde_large 1
}
block pte {
    field_high page_base_address 20
    field avl 3
    field global 1
    field pat 1
    field dirty 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block asid_map_none {
    padding 30
    field type 2
}
block asid_map_vspace {
    field_high vspace_root 20
    padding 10
    field type 2
}
tagged_union asid_map type {
    tag asid_map_none 0
    tag asid_map_vspace 1
}
block cr3 {
    field_high pd_base_address 20
    padding 12
}
--
-- Copyright 2017, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the BSD 2-Clause license. Note that NO WARRANTY is provided.
-- See "LICENSE_BSD2.txt" for details.
--
-- @TAG(DATA61_BSD)
--
-- this file contains sel4arch specific types shared between libsel4 and the kernel
tagged_union seL4_Fault seL4_FaultType {
    -- generic faults
    tag NullFault 0
    tag CapFault 1
    tag UnknownSyscall 2
    tag UserException 3
    -- arch specific faults
    tag VMFault 5
}
base 32
block x86_pat_msr {
    padding 5
    field pa7 3
    padding 5
    field pa6 3
    padding 5
    field pa5 3
    padding 5
    field pa4 3
    padding 5
    field pa3 3
    padding 5
    field pa2 3
    padding 5
    field pa1 3
    padding 5
    field pa0 3
}
-- Local APIC
block apic_base_msr {
    field_high base_addr 20
    field enabled 1
    field x2apic 1
    padding 1
    field is_bsp 1
    padding 8
}
block apic_version {
    padding 8
    field max_lvt_entry 8
    padding 8
    field version 8
}
block apic_svr {
    padding 22
    field focus_processor_chk 1
    field enabled 1
    field spurious_vector 8
}
block apic_lvt {
    padding 13
    field timer_mode 2
    field masked 1
    field trigger_mode 1
    field remote_irr 1
    field pin_polarity 1
    field delivery_status 1
    padding 1
    field delivery_mode 3
    field vector 8
}
block apic_icr1 {
    padding 12
    field dest_shorthand 2
    padding 2
    field trigger_mode 1
    field level 1
    padding 1
    field delivery_status 1
    field dest_mode 1
    field delivery_mode 3
    field vector 8
}
block apic_icr2 {
    field dest 8
    padding 24
}
block x2apic_icr1 {
    padding 12
    field dest_shorthand 2
    padding 2
    field trigger_mode 1
    field level 1
    padding 2
    field dest_mode 1
    field delivery_mode 3
    field vector 8
}
block x2apic_icr2 {
    field dest 32
}
-- x86-specific IRQ state structure
block irq_ioapic {
    field irqType 4
    field id 5
    field pin 5
    field level 1
    field polarity_low 1
    field masked 1
    padding 15
    padding 32
}
block irq_msi {
    field irqType 4
    field bus 8
    field dev 5
    field func 3
    padding 12
    field handle 32
}
block irq_free {
    field irqType 4
    padding 28
    padding 32
}
block irq_reserved {
    field irqType 4
    padding 28
    padding 32
}
tagged_union x86_irq_state irqType {
    tag irq_free 0
    tag irq_ioapic 1
    tag irq_msi 2
    tag irq_reserved 3
}
-- CPUID bitfields. Same on 32 and 64 bit.
block cpuid_001h_eax {
    padding 4
    field extended_family 8
    field extended_model 4
    padding 2
    field type 2
    field family 4
    field model 4
    field stepping 4
}
block cpuid_001h_ebx {
    padding 24
    field brand 8
}
